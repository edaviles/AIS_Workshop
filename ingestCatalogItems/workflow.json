{
    "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "XML_Validation": {
                "type": "XmlValidation",
                "inputs": {
                    "content": "@xml(body('Read_blob_content')?['content'])",
                    "schema": {
                        "source": "LogicApp",
                        "name": "vendorschema.xsd"
                    }
                },
                "runAfter": {
                    "GetBatchId": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Read_blob_content": {
                "type": "ServiceProvider",
                "inputs": {
                    "parameters": {
                        "containerName": "@triggerBody()?['containerInfo']?['name']",
                        "blobName": "@triggerBody()?['name']"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "AzureBlob",
                        "operationId": "readBlob",
                        "serviceProviderId": "/serviceProviders/AzureBlob"
                    }
                },
                "runAfter": {},
                "trackedProperties": {
                    "batchid": "@xpath(xml(body('Read_blob_content')?['content']), '/root/batchId/text()')",
                    "test": "test"
                }
            },
            "Transform_using_Data_Mapper_XSLT": {
                "type": "Xslt",
                "kind": "DataMapper",
                "inputs": {
                    "content": "@xml(body('Read_blob_content')?['content'])",
                    "map": {
                        "source": "LogicApp",
                        "name": "vendor-to-internal.xslt"
                    }
                },
                "runAfter": {
                    "Delete_blob_from_inbound": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Upload_transformed_content_to_outbound": {
                "type": "ServiceProvider",
                "inputs": {
                    "parameters": {
                        "containerName": "outbound",
                        "blobName": "Batch@{variables('BatchId')}.xml",
                        "content": "@outputs('Compose_internal_batch_json')",
                        "overrideIfExists": "true"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "AzureBlob",
                        "operationId": "uploadBlob",
                        "serviceProviderId": "/serviceProviders/AzureBlob"
                    }
                },
                "runAfter": {
                    "Compose_internal_batch_json": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Delete_blob_from_inbound": {
                "type": "ServiceProvider",
                "inputs": {
                    "parameters": {
                        "containerName": "@triggerBody()?['containerInfo']?['name']",
                        "blobName": "@triggerBody()?['name']"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "AzureBlob",
                        "operationId": "deleteBlob",
                        "serviceProviderId": "/serviceProviders/AzureBlob"
                    }
                },
                "runAfter": {
                    "XML_Validation": [
                        "SUCCEEDED"
                    ]
                }
            },
            "GetBatchId": {
                "type": "InitializeVariable",
                "inputs": {
                    "variables": [
                        {
                            "name": "BatchId",
                            "type": "string",
                            "value": "@{xpath(xml(body('Read_blob_content')?['content']),'/root/batchId/text()')}"
                        }
                    ]
                },
                "runAfter": {
                    "Read_blob_content": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Transform_xml_batch_to_JSON_batch_msg": {
                "type": "Xslt",
                "kind": "DataMapper",
                "inputs": {
                    "content": "@body('Transform_using_Data_Mapper_XSLT')",
                    "map": {
                        "source": "LogicApp",
                        "name": "internalXMLBatch-to-internalJSONBatch.xslt"
                    }
                },
                "runAfter": {
                    "Transform_using_Data_Mapper_XSLT": [
                        "SUCCEEDED"
                    ]
                }
            },
            "For_each": {
                "type": "Foreach",
                "foreach": "@body('Transform_xml_batch_to_JSON_batch_msg')?['catalogItems']",
                "actions": {
                    "Compose": {
                        "type": "Compose",
                        "inputs": "@setProperty(item(),'longDesc','test long description')"
                    }
                },
                "runAfter": {
                    "Transform_xml_batch_to_JSON_batch_msg": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Compose_internal_batch_json": {
                "type": "Compose",
                "inputs": {
                    "catalogItems": "@outputs('Compose')"
                },
                "runAfter": {
                    "For_each": [
                        "SUCCEEDED"
                    ]
                }
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "triggers": {
            "When_a_blob_is_added_to_inbound": {
                "type": "ServiceProvider",
                "inputs": {
                    "parameters": {
                        "path": "inbound"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "AzureBlob",
                        "operationId": "whenABlobIsAddedOrModified",
                        "serviceProviderId": "/serviceProviders/AzureBlob"
                    }
                }
            }
        },
        "parameters": {
            "AzureAiBaseEndpoint": {
                "type": "String",
                "value": "@appsetting('openaiEndpoint')",
                "defaultValue": "@appsetting('openaiEndpoint')"
            },
            "DavinciEndpoint": {
                "type": "String",
                "value": "@appsetting('davinciDeployment')",
                "defaultValue": "@appsetting('davinciDeployment')"
            },
            "AOAIAPIKey": {
                "type": "String",
                "value": "@appsetting('openaiKey')",
                "defaultValue": "@appsetting('openaiKey')"
            },
            "AzureDALLEEndpoint": {
                "type": "String",
                "value": "images/generations:submit",
                "defaultValue": "images/generations:submit"
            },
            "AzureDALLERetrievalEndpoint": {
                "type": "String",
                "value": "operations/images/",
                "defaultValue": "operations/images/"
            },
            "AzureAPIVersion": {
                "type": "String",
                "value": "@appsetting('azureOpenAIAPIVersion')",
                "defaultValue": "@appsetting('azureOpenAIAPIVersion')"
            }
        }
    },
    "kind": "Stateful"
}